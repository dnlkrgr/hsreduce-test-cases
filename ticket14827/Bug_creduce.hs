{-# language OverloadedStrings #-}
import qualified Data.Text as T
import Data.Text ( Text )
a :: [Text] -> Text
a entries
  = b [""] ""
  where
      b current@(d : _) _
        = b (filter f $ concatMap g current) d
      f d = all (\ e -> T.isInfixOf d e) entries
      g d = map (\ c -> T.cons c d) ['A', 'C', 'G', 'T']
main
  = do let h = a contents
       print h
contents
  = ["TAGCCGACGTTTTCACTCGTTCCCATGCATTATGCAGCTATTTCCAGTAATTGTTCCCCGCTCGATAAGGTGTCCAAGGACAAATCTTGAAACATATCGACGCTTGACAGAACCCGGATTCCATCGGCGGTGTTCACCTAGGGCACCTATCGTGTTTCCACTAGAGTAATCACAACAATTGAAAAGTAACTCGTGTTTCCCTTTGTGCCGGGCGAACGCTACGCCCCCAGCTACTACACCAACGTTAATCGAAGACCTTCTTGACAGTTGGTAGCACATACCCTACGCTGGGTACGAGCTGGAGAGCTGAAACCCGACCCTATGAGAATCCATACTTCAGACTGTATCGTTGTCCATATAATGGACACGGGGTACTTTTGGCATGATATTGTAATTTGTCATGCGATTGCCTCAGTATATCCCTGCTTACACGTGCAGAAAATATGTCCCATTTTACACCGGTCCACCATAACAATTATGCAACTTGTCAGTCGGGGTAGGCTCGGTCTCTGCGTCTAGCGGTGTGAATTACGCGTCCCACCTGCACCAACCACTGACTTTAGGGATCTTTGGGTATCGTGCATCTTGATTCGGTTCTGCCGGAGTTTTCTTAGCAACCAAAACACGGCACATCCAGCCATTTCTTTAACAGTTGAGAGTGTTAGGCCTAACAAATTTACGAGCGAAAATATGAGCTAAGACGAAACGAGACGACTGAAGAGACCCTACGGACGAGCGCCTTGAATATTGTCACCCCCTGAGTTAGGTGCGGGAGCGAGTTAATGATCGTAGTATCGCCAACTTAGTGAAACAGTTGTAACGGCCGCTCTATGCGAATTATCGTGTTTTCCAGCTCCAATAAGCTACAGGAAGGATGCCTGGCCTTGTCACTTTATTCGGGAACGAATAGACGTGGAGCGTCTTCCGGCCACTCCTCGCCGAGTTTCTACCTGATGCGAGGCCTAAGAGGCAGTTGTGTAAAGGAAAATATTCCAAGCTT",
     "GTCAACCTGAATTATGCTAACCAGTCCCTTCTACCGGGGCCCATCATGTGTTCCTCCTGGGAATAGCTAGCCTAGCCTATTTAACGTACGTTATGATGAAAGCCGTAACAAGCACAGGTCCAGTTTACATGTCTCGTCTGTCAGTAGTTTTAACGGGCGTACGTACGCTGTGATGTAAAAGGGAAAACCACGAATTCCGGTAGCGGGATGTGGACTGGAAGTGAGCTAACCTTACTATTTTTGGTGGTCAAAGTACCGGTAATGCTCAGACTCCGTAAGATACGCTGTCAACCGTTGGCACGGTGGGTAACTAAGTCTCGACAACCGAAGGCACATCCTAGACAAGCGTAATCTCTTGCGCCTTCTAACAATATTAGCCAGAGCCAGGTCCCTTGCCCCGTATTACCGCGGGAGCACTCATAATCCATACAGACAGGCGACATACCATTGGCATAAGGAAGCATAGGATTAAAAGTGTAGGAGCACCACTCGGATGCAAGACAGTACTCATAAGTCCGAAAAGAGCTGGGCCAGAGACTTAATGGGCGAGACCGCTATATTGGCCAGATTAGGAACTCAACTGACGCTAGTCCGGAAGTTCGCGCGCGGTTGCAAGCGGCTTGATCCTGTGCCATGACGAGCCACTCTCCATGGTGAGGGGGCCCTTCACGAATTTGCTTGGAAGGGGTATATACCAGCCGAAGGGTAGCAAATGAATGCTGACACTTTCCTCGGGCATGGCATTAAGTAGCGGAGTGGGTGCACTCCTGTCCGGCGATACCTGAGTTAGGTGCGGGAGCGAGTTAATGATCGTAGTATCGCCAACTTAGTGAAACAGTTGTAACGGCCGCTCTATGCGAATTATCGTGTTTTCCAGCTCCAATAAGCTACAGGAAGGATGCCTGGCCTTGTCACTTTATTCGGGAACGAATAGACGTGGAGCGTCTTCCGGCCACTCCTAAGATATTCAACTTTAGGACGTATTCACGCCCCTCCGCTG"]
