{-# LANGUAGE OverloadedStrings #-}
module Main (
        main
    ) where
import qualified Data.Text as T
import Data.Text ( Text(..) )
longestCommonSubstring entries
  = go [""] undefined
  where
      go :: [Text] -> () -> ()
      go current@(_ : _) _
        = go (filter substringOfAll $ concatMap step current) undefined
      substringOfAll s = all (\ e -> T.isInfixOf s e) entries
      step s = map (\ c -> T.cons c s) ['A', 'C', 'G', 'T']
main
  = do let lss = longestCommonSubstring contents
       print lss
contents
  = ["TACCCTTGTAATATTAGCCTTTCCATAATATTACTTCCGCATTGCTGGTGGTAGCTTTTGTATCGCTTGCAAAGCATACTTGACTCCGTCGCGCTATCCGACAGAGCCCCACCAAGCCTCTATGCCCTTTCGCACTAAGCCGAAATGCGTCCCACCTATTGATCCTGCCTCTTTTGTCCCGGCAAGGAGACCGTGCGTTTAGAATTTTCTATAACGGTTCGGTTTTACTAGCATGCGGGTGGCAATAATTACACTGCGAATCTTGTTGCGGTTAAGGCATAAATGGCACAGAATGCAACAAGGCCCTCCTTCCCTCGCCCAACTATGTAGATCCAGTGATTAACAAGAACCGCATAAAATGCGACGAGTTATATCGAGAGGCGCGAAGCAGCGCTAGTTAGCTCGCCCCACGGGTGCCGCACGTACAATCTTGTGGGCCCCTTAATTAGTATGAACTGCTATACCACGGGCAGGCCACGCGCCCCTAATGTTGGTCTCTTGACCAACCTAGGAACTTACCGACTAGAGTTTCTCTAAACATGAATCCATAAGAGAATTTGCAGTAAGCATCATGCGGCGGCCAAACGGTATTTCCCGGCTTGGTTCACTCGGAGAAAGACTACACCGGCACGACCCCGGTACGTTACACTGACTATCGCGACTCCCCCTTAATACAGTAGTACCGCGCTGGGGTTTAGATATCTGTTTATTGTCCTGAGTTAGGTGCGGGAGCGAGTTAATGATCGTAGTATCGCCAACTTAGTGAAACAGTTGTAACGGCCGCTCTATGCGAATTATCGTGTTTTCCAGCTCCAATAAGCTACAGGAAGGATGCCTGGCCTTGTCACTTTATTCGGGAACGAATAGACGTGGAGCGTCTTCCGGCCACTCCTTAACCATGGAGGAACTTCCAACACTCGAGGGGGCTCGGTATCGATTAACATATTTAAGCCCCGGCGCTAGGTGATACAACAGCACATGTGCGAAGACATAATTCCAG",
     "GTCAACCTGAATTATGCTAACCAGTCCCTTCTACCGGGGCCCATCATGTGTTCCTCCTGGGAATAGCTAGCCTAGCCTATTTAACGTACGTTATGATGAAAGCCGTAACAAGCACAGGTCCAGTTTACATGTCTCGTCTGTCAGTAGTTTTAACGGGCGTACGTACGCTGTGATGTAAAAGGGAAAACCACGAATTCCGGTAGCGGGATGTGGACTGGAAGTGAGCTAACCTTACTATTTTTGGTGGTCAAAGTACCGGTAATGCTCAGACTCCGTAAGATACGCTGTCAACCGTTGGCACGGTGGGTAACTAAGTCTCGACAACCGAAGGCACATCCTAGACAAGCGTAATCTCTTGCGCCTTCTAACAATATTAGCCAGAGCCAGGTCCCTTGCCCCGTATTACCGCGGGAGCACTCATAATCCATACAGACAGGCGACATACCATTGGCATAAGGAAGCATAGGATTAAAAGTGTAGGAGCACCACTCGGATGCAAGACAGTACTCATAAGTCCGAAAAGAGCTGGGCCAGAGACTTAATGGGCGAGACCGCTATATTGGCCAGATTAGGAACTCAACTGACGCTAGTCCGGAAGTTCGCGCGCGGTTGCAAGCGGCTTGATCCTGTGCCATGACGAGCCACTCTCCATGGTGAGGGGGCCCTTCACGAATTTGCTTGGAAGGGGTATATACCAGCCGAAGGGTAGCAAATGAATGCTGACACTTTCCTCGGGCATGGCATTAAGTAGCGGAGTGGGTGCACTCCTGTCCGGCGATACCTGAGTTAGGTGCGGGAGCGAGTTAATGATCGTAGTATCGCCAACTTAGTGAAACAGTTGTAACGGCCGCTCTATGCGAATTATCGTGTTTTCCAGCTCCAATAAGCTACAGGAAGGATGCCTGGCCTTGTCACTTTATTCGGGAACGAATAGACGTGGAGCGTCTTCCGGCCACTCCTAAGATATTCAACTTTAGGACGTATTCACGCCCCTCCGCTG"]
